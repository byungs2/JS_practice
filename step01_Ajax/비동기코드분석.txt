	
	1. sample code
		function loadDoc() {
			var xhttp = new XMLHttpRequest();
			
			//이벤트 처리 함수 : 호출은 해당 시점에 시스템이 호출 (콜백 함수)
			xhttp.onreadystatechange = function() {
				alert(this.readyState);
				if (this.readyState == 4 && this.status == 200) {
					document.getElementById("demo").innerHTML = this.responseText;
				}
			};
			xhttp.open("GET", "res.jsp", true);
			xhttp.send();
		}
		
	2. 분석
		1. XMLHttpRequest(xhr)
			- 비동기용 전담 객체
			- 모든 브라우저 내의 내장된 표준화 API
		2. onreadystatechange
			- 실제 이벤트가 발생이 되면 실행되는 콜백 함수 등록 속성
			- 이벤트 핸들러
		3. readyState
			- 1~4의 값으로 요청 및 응답 진행상태 값 표현
			- 브라우저와 서버 소통 시 자동으로 변경
		4. status
			- 보유값으로 응답 상태값 보유
			- 200, 400번대, 500 등등
		5. open()
			- (요청 방식, 요쳥 url, 비동기 요청(true)/동기 요청 여부(false))
		6. send()
			- 실제 서버에 요청
		7. responseText
			- 서버가 응답하는 데이터 포멧중 HTML/CSV/JSON/TEXT 데이터를 가지고 있다
			- HTML/CSV/JSON/TEXT 포맷처럼 보이지만 문자열로 인지
		8. responseXML
			- xml 포맷의 데이터만 응답 받는다
			- xml 포맷 그대로 인식, 문자열로 간주하지 않는다 
			
		* get방식과 post 방식의 쿼리 스트링 전송 구조가 다르다
			1. get 방식
				open("GET","res.jsp?key=value", true);
				send()
			2. post 방식	
				open("POST","res.jsp", true);
				xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
				send("key=value");
				*** 주의 사항
					post방식으로 query String값 전송시 반드시  xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
					코드 필수
					요청 시 정보를 서버에 전송하겠다는 설정
						: form은 데이터를 서버에 전송하는 전담 tag이면서 의미로 인지
						
	3. 요청과 응답에 대한 내부 프로세스
		1. 전제조건 : 화면 갱신 없이 JS의 요청 객체로 요청, 응답 처리 기술
		2. 실행 과정
			this.readyState
				요청 시작시 값 1
				진행중 2
				응답시작 3
				응답완료 4
				
			1. 요청 시작	- client 동작( 이벤트)
			2. 요청 중		- 네트워크 타고 서버에 요청 날리는 중
			3. 요청 받고	- 서버가 받는다
			4. 요청 처리	- 서버가 처리
			5. 요청에 따른 응답	- 응답 시작, 네트워크 타고 응답 완료
				: 500 or 404 or 200	응답 번호
					- 브라우저는 200을 받으면 정상응답이라고 감지 이후 화면 출력을 위한 준비
					
			6. 응답 받아 해당 데이터 처리 
					- 200인 경우 정상응답, client 브라우저는 실행
					
		3. 인지해야 하는 항목들
			1. 요청 시작, 응답 감지
			2. 정상 응답, 비정상 응답 확인